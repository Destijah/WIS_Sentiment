// Generated by CoffeeScript 1.9.0
(function() {
  var Glob, Key, kindof, mixin, _ref,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  _ref = require('./helpers'), kindof = _ref.kindof, mixin = _ref.mixin;

  exports.Key = Key = (function() {
    Key.prototype.regex = /[\w\-\s]+/;

    function Key(_at_name, _at_optional) {
      this.name = _at_name;
      this.optional = _at_optional;
      if (this.name === 'controller' || this.name === 'action') {
        this.regex = /[a-zA-Z_][\w\-]*/;
      }
    }

    Key.prototype.regexString = function() {
      var ret;
      ret = ['('];
      ret.push(this.regex.source);
      ret.push(')');
      if (this.optional) {
        ret.push('?');
      }
      return ret.join('');
    };

    Key.prototype.test = function(string) {
      return new RegExp("^" + (this.regexString()) + "$").test(string);
    };

    Key.prototype.url = function(string) {
      if (this.test(string)) {
        return string;
      } else {
        return false;
      }
    };

    Key.prototype.where = function(conditions) {
      var c, condition, ret, _i, _len;
      condition = conditions[this.name];
      if (condition instanceof RegExp) {
        this.regex = condition;
      }
      if (condition instanceof String) {
        this.regex = new RegExp(condition);
      }
      if (condition instanceof Array) {
        ret = [];
        for (_i = 0, _len = condition.length; _i < _len; _i++) {
          c = condition[_i];
          if ('regex' === kindof(c)) {
            ret.push(c.source);
          }
          if ('string' === kindof(c)) {
            ret.push(c);
          }
        }
        this.regex = new RegExp(ret.join('|'));
      }
      return this;
    };

    Key.prototype.toString = function() {
      return ":" + this.name;
    };

    Key.regex = /:([a-zA-Z_][\w\-]*)/;

    Key.parse = function(string, optional) {
      var definition, name, _ref1;
      if (optional == null) {
        optional = false;
      }
      _ref1 = this.regex.exec(string), definition = _ref1[0], name = _ref1[1];
      return new this(name, optional);
    };

    return Key;

  })();

  exports.Glob = Glob = (function(_super) {
    __extends(Glob, _super);

    Glob.prototype.regex = /[\w\-\/\s]+?/;

    function Glob(_at_name, _at_optional) {
      this.name = _at_name;
      this.optional = _at_optional;
      if (this.name === 'controller' || this.name === 'action') {
        this.regex = /[a-zA-Z_][\w\-]*/;
      }
    }

    Glob.prototype.toString = function() {
      return "*" + this.name;
    };

    Glob.regex = /\*([a-zA-Z_][\w\-]*)/;

    return Glob;

  })(Key);

}).call(this);
