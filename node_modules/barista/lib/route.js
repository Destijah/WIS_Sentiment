// Generated by CoffeeScript 1.9.0
(function() {
  var Glob, Key, Resource, Route, Text, inflection, kindof, mixin, _ref, _ref1;

  _ref = require('./key'), Key = _ref.Key, Glob = _ref.Glob;

  Text = require('./text').Text;

  Resource = require('./resource').Resource;

  _ref1 = require('./helpers'), kindof = _ref1.kindof, mixin = _ref1.mixin;

  inflection = require('inflection');

  exports.Route = Route = (function() {
    function Route(router, path, method, _at_optional) {
      this.optional = _at_optional != null ? _at_optional : false;
      if (router && path) {
        this.match.apply(this, arguments);
      }
    }

    Route.prototype.match = function(router, path, method, _at_optional) {
      var key, nested_route, new_keys, prefix, replKey, _i, _len;
      this.optional = _at_optional != null ? _at_optional : false;
      if (typeof path !== 'string') {
        throw new Error('path must be a string');
      }
      if (this.path != null) {
        prefix = this.path;
        new_keys = [];
        if (this.collection || this.member) {
          new_keys.push(':id');
        }
        new_keys.push * path.match(RegExp(Key.regex.source, 'g'));
        for (_i = 0, _len = new_keys.length; _i < _len; _i++) {
          key = new_keys[_i];
          replKey = new RegExp(":(" + (key.substring(1)) + "/?)");
          prefix = prefix.replace(replKey, ":" + (inflection.underscore(inflection.singularize(this.params.controller))) + "_$1");
        }
        nested_route = new Route(router, prefix + path, method, this.optional);
        nested_route.default_params = this.default_params;
        if (this.conditions) {
          nested_route.where(this.conditions);
        }
        return nested_route;
      }
      if (typeof method === 'string') {
        this.method = method.toUpperCase();
      }
      this.params = {};
      this.default_params = {};
      this.parts = [];
      this.route_name = null;
      this.path = path;
      Object.defineProperty(this, 'router', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: router
      });
      this.parts = Route.parse(router, path, method, this.optional);
      this.path = this.toString();
      if (!this.optional) {
        this.router.routes.push(this);
      }
      return this;
    };

    Route.prototype.get = function(path) {
      return this.match(this.router, path, 'GET');
    };

    Route.prototype.put = function(path) {
      return this.match(this.router, path, 'PUT');
    };

    Route.prototype.post = function(path) {
      return this.match(this.router, path, 'POST');
    };

    Route.prototype.patch = function(path) {
      return this.match(this.router, path, 'PATCH');
    };

    Route.prototype.del = function(path) {
      return this.match(this.router, path, 'DELETE');
    };

    Route.prototype.resource = function(controller) {
      return new Resource(this, controller);
    };

    Route.prototype.regexString = function() {
      var part, ret, _i, _len, _ref2;
      ret = ['('];
      _ref2 = this.parts;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        part = _ref2[_i];
        ret.push(part.regexString());
      }
      ret.push(')');
      if (this.optional) {
        ret.push('?');
      }
      return ret.join('');
    };

    Route.prototype.test = function(string) {
      if (this.regex == null) {
        this.regex = RegExp("^" + (this.regexString()) + "(\\\?.*)?$");
      }
      return this.regex.test(string);
    };

    Route.prototype.to = function(endpoint, default_params) {
      var _ref2, _ref3;
      if (!default_params && typeof endpoint !== 'string') {
        _ref2 = [endpoint, void 0], default_params = _ref2[0], endpoint = _ref2[1];
      }
      mixin(this.default_params, default_params);
      if (endpoint) {
        if (!(0 < endpoint.indexOf('.'))) {
          throw new Error('syntax should be in the form: controller.action');
        }
        _ref3 = endpoint.split('.'), this.params.controller = _ref3[0], this.params.action = _ref3[1];
      }
      mixin(this.params, this.default_params);
      return this;
    };

    Route.prototype.as = function(_at_route_name) {
      this.route_name = _at_route_name;
      return this;
    };

    Route.prototype.name = function(name) {
      console.log('DEPRECATION NOTICE: this method has been renamed "as"\nand will be removed in a future version of Barista');
      return this.as.apply(this, arguments);
    };

    Route.prototype.where = function(_at_conditions) {
      var part, _i, _len, _ref2;
      this.conditions = _at_conditions;
      if (kindof(this.conditions) !== 'object') {
        throw new Error('conditions must be an object');
      }
      _ref2 = this.parts;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        part = _ref2[_i];
        if (typeof part.where === "function") {
          part.where(this.conditions);
        }
      }
      return this;
    };

    Route.prototype.stringify = function(params) {
      var i, key, part, url, val, _i, _j, _len, _ref2, _ref3;
      url = [];
      _ref2 = this.parts;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        part = _ref2[_i];
        if (part instanceof Key) {
          if ((params[part.name] != null) && part.regex.test(params[part.name])) {
            url.push(part.url(params[part.name]));
            delete params[part.name];
          } else if (this.optional) {
            return false;
          }
        } else if (part instanceof Route) {
          url.push(part);
        } else {
          url.push(part);
        }
      }
      for (i = _j = url.length - 1; _j >= 0; i = _j += -1) {
        part = url[i];
        if (part instanceof Route) {
          part = part.stringify(params);
          if (part) {
            params = part[1];
            url[i] = part = part[0];
          } else {
            delete url[i];
          }
        }
      }
      _ref3 = this.params;
      for (key in _ref3) {
        val = _ref3[key];
        delete params[key];
      }
      return [url.join(''), params];
    };

    Route.prototype.keysAndRoutes = function() {
      var part, _i, _len, _ref2, _results;
      _ref2 = this.parts;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        part = _ref2[_i];
        if (part instanceof Key || part instanceof Route) {
          _results.push(part);
        }
      }
      return _results;
    };

    Route.prototype.keys = function() {
      var part, _i, _len, _ref2, _results;
      _ref2 = this.parts;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        part = _ref2[_i];
        if (part instanceof Key) {
          _results.push(part);
        }
      }
      return _results;
    };

    Route.prototype.parse = function(urlParam, method) {
      var is_head_req, j, pairings, params, part, parts, path, segm, url, _i, _j, _len, _ref2, _ref3;
      url = require('url').parse(urlParam);
      path = decodeURI(url.pathname);
      params = {
        method: method
      };
      mixin(params, this.params);
      if (is_head_req = params.method === 'HEAD') {
        params.method = 'GET';
      }
      if ((this.method != null) && (params.method != null) && this.method !== params.method) {
        return false;
      }
      if (params.method == null) {
        params.method = this.method;
      }
      if (!this.test(path)) {
        return false;
      }
      parts = new RegExp("^" + (this.regexString()) + "$").exec(path).slice(2);
      pairings = [];
      j = 0;
      _ref2 = this.keysAndRoutes();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        segm = _ref2[_i];
        part = parts[j];
        if (segm.test(part)) {
          pairings.push([segm, part]);
        }
        j += segm.regex.exec(part || '').slice(2).length || 1;
      }
      for (_j = pairings.length - 1; _j >= 0; _j += -1) {
        _ref3 = pairings[_j], segm = _ref3[0], part = _ref3[1];
        if (segm instanceof Key) {
          params[segm.name] = part;
        } else if (segm instanceof Route) {
          mixin(params, segm.parse(part, method));
        }
      }
      if (is_head_req) {
        params.method = 'HEAD';
      }
      return params;
    };

    Route.prototype.nest = function(cb) {
      if (typeof cb !== 'function') {
        throw new Error('route.nest() requires a callback function');
      }
      cb.call(this);
      return this;
    };

    Route.prototype.toString = function() {
      var defn, part;
      defn = ((function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.parts;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          part = _ref2[_i];
          _results.push(part.toString());
        }
        return _results;
      }).call(this)).join('');
      if (this.optional) {
        return "(" + defn + ")";
      }
      return defn;
    };

    Route.parse = function(router, string, method, optional) {
      var char, i, len, part, parts, rest;
      if (optional == null) {
        optional = false;
      }
      parts = [];
      i = 0;
      len = string.length;
      while (i < len) {
        char = string[i];
        rest = string.slice(i);
        if (char === '(' && i === 0) {
          i++;
          continue;
        }
        if (char === ')') {
          return parts;
        }
        if (char === ':' && string[i + 1] !== ':') {
          parts.push(part = Key.parse(rest));
        } else if (char === '*') {
          parts.push(part = Glob.parse(rest));
        } else if (char === '(') {
          parts.push(part = new Route(router, rest, method, true));
        } else {
          parts.push(part = Text.parse(rest));
        }
        i += part.toString().length;
      }
      return parts;
    };

    return Route;

  })();

}).call(this);
