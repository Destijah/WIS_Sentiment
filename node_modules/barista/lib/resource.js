// Generated by CoffeeScript 1.9.0
(function() {
  var Resource, inflection, kindof, mixin, nomenclate, _ref;

  _ref = require('./helpers'), kindof = _ref.kindof, mixin = _ref.mixin;

  inflection = require('inflection');

  exports.Resource = Resource = (function() {
    function Resource(base, controller) {
      var plural, singular;
      plural = inflection.underscore(inflection.pluralize(controller));
      singular = inflection.underscore(inflection.singularize(controller));
      this.routes = [base.get("/" + plural + "(.:format)").to(controller + ".index").as(base.collection || base.member ? nomenclate(base.route_name, plural) : nomenclate(plural)), base.post("/" + plural + "(.:format)").to(controller + ".create"), base.get("/" + plural + "/add(.:format)").to(controller + ".add").as(base.collection || base.member ? nomenclate('add', base.route_name, singular) : nomenclate('add', singular)), base.get("/" + plural + "/:id(.:format)").to(controller + ".show").as(base.collection || base.member ? nomenclate(base.route_name, singular) : nomenclate(singular)), base.get("/" + plural + "/:id/edit(.:format)").to(controller + ".edit").as(base.collection || base.member ? nomenclate('edit', base.route_name, singular) : nomenclate('edit', singular)), base.put("/" + plural + "/:id(.:format)").to(controller + ".update"), base.del("/" + plural + "/:id(.:format)").to(controller + ".destroy")];
      this.collection_route = this.routes[0];
      this.member_route = this.routes[3];
      this.collection_route.collection = true;
      this.member_route.member = true;
      this;
    }

    Resource.prototype.where = function(conditions) {
      var route, _i, _len, _ref1;
      if (kindof(conditions) !== 'object') {
        throw new Error('conditions must be an object');
      }
      _ref1 = this.routes;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        route = _ref1[_i];
        if (typeof route.where === "function") {
          route.where(conditions);
        }
      }
      return this;
    };

    Resource.prototype.collection = function(cb) {
      this.collection_route.nest(cb);
      return this;
    };

    Resource.prototype.member = function(cb) {
      this.member_route.nest(cb);
      return this;
    };

    Resource.prototype.nest = function(cb) {
      this.member_route.nest(cb);
      this.collection_route.nest(cb);
      return this;
    };

    return Resource;

  })();

  kindof = function(o) {
    switch (false) {
      case typeof o === "object":
        return typeof o;
      case o !== null:
        return "null";
      case o.constructor !== Array:
        return "array";
      case o.constructor !== Date:
        return "date";
      case o.constructor !== RegExp:
        return "regex";
      default:
        return "object";
    }
  };

  nomenclate = function() {
    var args;
    args = Array.prototype.slice.call(arguments);
    if (!args.filter(function(a) {
      return a == null;
    }).length) {
      return args.join('_');
    }
  };

}).call(this);
