{
  "name": "nlcst-to-string",
  "version": "1.1.0",
  "description": "Transform an NLCST node into a string",
  "license": "MIT",
  "keywords": [
    "nlcst",
    "retext",
    "to",
    "string"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/wooorm/nlcst-to-string"
  },
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com"
  },
  "files": [
    "index.js"
  ],
  "devDependencies": {
    "browserify": "^12.0.0",
    "eslint": "^1.0.0",
    "esmangle": "^1.0.0",
    "istanbul": "^0.4.0",
    "jscs": "^2.0.0",
    "jscs-jsdoc": "^1.0.0",
    "mdast": "^2.0.0",
    "mdast-comment-config": "^1.0.0",
    "mdast-github": "^1.0.0",
    "mdast-lint": "^1.0.0",
    "mdast-slug": "^2.0.0",
    "mdast-validate-links": "^1.0.0",
    "mocha": "^2.0.0"
  },
  "scripts": {
    "test-api": "mocha --check-leaks test.js",
    "test-coverage": "istanbul cover _mocha -- test.js",
    "test-travis": "npm run test-coverage",
    "test": "npm run test-api",
    "lint-api": "eslint .",
    "lint-style": "jscs --reporter inline .",
    "lint": "npm run lint-api && npm run lint-style",
    "make": "npm run lint && npm run test-coverage",
    "bundle": "browserify index.js --no-builtins -s nlcstToString > nlcst-to-string.js",
    "postbundle": "esmangle nlcst-to-string.js > nlcst-to-string.min.js",
    "build-md": "mdast . --quiet",
    "build": "npm run bundle && npm run build-md"
  },
  "readme": "# nlcst-to-string [![Build Status](https://img.shields.io/travis/wooorm/nlcst-to-string.svg)](https://travis-ci.org/wooorm/nlcst-to-string) [![Coverage Status](https://img.shields.io/codecov/c/github/wooorm/nlcst-to-string.svg)](https://codecov.io/github/wooorm/nlcst-to-string)\n\nTransform an [NLCST](https://github.com/wooorm/nlcst) node into a string.\n\n## Installation\n\n[npm](https://docs.npmjs.com/cli/install):\n\n```bash\nnpm install nlcst-to-string\n```\n\n**nlcst-to-string** is also available for [bower](http://bower.io/#install-packages),\n[component](https://github.com/componentjs/component), and\n[duo](http://duojs.org/#getting-started), and as an AMD, CommonJS, and globals\nmodule, [uncompressed](nlcst-to-string.js) and [compressed](nlcst-to-string.min.js).\n\n## Usage\n\n```javascript\nvar nlcstToString = require('nlcst-to-string');\n\nconsole.log(nlcstToString({\n    \"type\": \"WordNode\",\n    \"data\": {\n        \"partOfSpeech\": [\n            \"NNP\",\n            \"NN\"\n        ]\n    },\n    \"children\": [\n        {\n            \"type\": \"TextNode\",\n            \"value\": \"AT\"\n        },\n        {\n            \"type\": \"PunctuationNode\",\n            \"value\": \"&\"\n        },\n        {\n            \"type\": \"TextNode\",\n            \"value\": \"T\"\n        }\n    ]\n}));\n```\n\nYields:\n\n```text\nAT&T\n```\n\n## API\n\n### toString(node\\[, separator\\])\n\nStringify an [NLCST](https://github.com/wooorm/nlcst) [node](https://github.com/wooorm/nlcst#node)\n(or an array of NLCST nodes).\n\n**Signatures**\n\n*   `toString(node[, separator])`;\n*   `toString(nodes[, separator])`.\n\n**Parameters**\n\n*   `node` ([`NLCSTNode`](https://github.com/wooorm/nlcst#node))\n    — Node to to stringify.\n\n*   `nodes` (`Array.<NLCSTNode>`) — Nodes to to stringify.\n\n*   `separator` (`string`, optional, default: `''`) — Value to separate\n    each item with.\n\n**Returns**\n\n`string` — Stringified `node` / `nodes`.\n\n## License\n\n[MIT](LICENSE) © [Titus Wormer](http://wooorm.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/wooorm/nlcst-to-string/issues"
  },
  "_id": "nlcst-to-string@1.1.0",
  "dist": {
    "shasum": "bf836425568a6cbdef0e921e58bc487d8ff6d8a1"
  },
  "_from": "nlcst-to-string@^1.0.0",
  "_resolved": "https://registry.npmjs.org/nlcst-to-string/-/nlcst-to-string-1.1.0.tgz"
}
