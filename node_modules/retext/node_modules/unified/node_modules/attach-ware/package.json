{
  "name": "attach-ware",
  "version": "2.0.0",
  "description": "Middleware with configuration",
  "license": "MIT",
  "keywords": [
    "compose",
    "connect",
    "middleware",
    "config",
    "configuration"
  ],
  "dependencies": {
    "unherit": "^1.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wooorm/attach-ware.git"
  },
  "bugs": {
    "url": "https://github.com/wooorm/attach-ware/issues"
  },
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    }
  ],
  "files": [
    "index.js"
  ],
  "devDependencies": {
    "browserify": "^13.0.0",
    "eslint": "^1.0.0",
    "esmangle": "^1.0.0",
    "istanbul": "^0.4.0",
    "jscs": "^2.0.0",
    "jscs-jsdoc": "^1.0.0",
    "remark": "^4.0.0-alpha.4",
    "remark-comment-config": "^3.0.0-alpha.1",
    "remark-github": "^4.0.1",
    "remark-lint": "^2.0.0",
    "remark-toc": "^3.0.0-alpha.2",
    "remark-validate-links": "^2.0.2",
    "tape": "^4.4.0",
    "ware": "^1.3.0"
  },
  "scripts": {
    "build-md": "remark . --quiet --frail",
    "build-bundle": "browserify index.js -s AttachWare > attach-ware.js",
    "build-mangle": "esmangle attach-ware.js > attach-ware.min.js",
    "build": "npm run build-md && npm run build-bundle && npm run build-mangle",
    "lint-api": "eslint .",
    "lint-style": "jscs --reporter inline .",
    "lint": "npm run lint-api && npm run lint-style",
    "test-api": "node test.js",
    "test-coverage": "istanbul cover test.js",
    "test": "npm run build && npm run lint && npm run test-coverage"
  },
  "readme": "# attach-ware [![Build Status][travis-badge]][travis] [![Coverage Status][codecov-badge]][codecov]\n\nMiddleware with configuration.\n\n## Installation\n\n[npm][npm-install]:\n\n```bash\nnpm install attach-ware\n```\n\n**attach-ware** is also available as an AMD, CommonJS, and globals\nmodule, [uncompressed and compressed][releases].\n\n## Usage\n\n`x.js`:\n\n```js\nmodule.exports = function (ctx, options) {\n    if (!options.condition) return;\n\n    return function (req, res, next) {\n        res.x = 'hello';\n        next();\n    };\n}\n```\n\n`y.js`:\n\n```js\nmodule.exports = function (ctx, options) {\n    if (!options.condition) return;\n\n    return function (req, res, next) {\n        res.y = 'world';\n        next();\n    };\n}\n```\n\n`index.js`:\n\n```js\nvar ware = require('attach-ware')(require('ware'));\nvar x = require('./x.js');\nvar y = require('./y.js');\n\nvar middleware = attachWare()\n    .use(x, {'condition': true})\n    .use(y, {'condition': false})\n    .run({}, {}, function (err, req, res) {\n        console.log(res.x); // \"hello\"\n        console.log(res.y); // undefined\n    });\n```\n\n## API\n\n### `AttachWare = attachWare(Ware)`\n\nCreate a new `AttachWare` based on the given middleware constructor.\n\n**Parameters**:\n\n*   `Ware` ([`Ware`][ware]).\n\n**Returns**: `Function`.\n\n### `AttachWare()`\n\nCreate configurable middleware.  Works just like the given\n[`Ware`][ware].\n\n### `AttachWare#use(attacher[, input...])`\n\n**Signatures**:\n\n*   `attachWare.use(attacher[, input...])`;\n*   `attachWare.use(attachers[, input...])`;\n*   `attachWare.use(list)`;\n*   `attachWare.use(matrix)`.\n\n**Parameters**:\n\n*   `attacher` (`Function`) — One attacher.\n\n*   `attachers` (`Array.<Function>`) — List where each value is an\n    `attacher`;\n\n*   `list` (`Array`) — List where the first value is an `attacher`,\n    and further values are `input`;\n\n*   `matrix` (`Array`) — Matrix where each entry is a `list`.\n\nInvokes `attacher` with [`context`][context] and all `input`.\n\nIf `attacher` returns another function (`fn`, which can be synchronous,\nasynchronous, or a generator function), that function is [added to the\nmiddleware][ware-use], and will be invoked when [`run()`][ware-run] is\ninvoked like normal middleware.\n\n### `AttachWare#context`\n\nThe first argument for `attach`ers. When this is falsey, the instance\nitself is used.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[travis-badge]: https://img.shields.io/travis/wooorm/attach-ware.svg\n\n[travis]: https://travis-ci.org/wooorm/attach-ware\n\n[codecov-badge]: https://img.shields.io/codecov/c/github/wooorm/attach-ware.svg\n\n[codecov]: https://codecov.io/github/wooorm/attach-ware\n\n[npm-install]: https://docs.npmjs.com/cli/install\n\n[releases]: https://github.com/wooorm/attach-ware/releases\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[ware]: https://github.com/segmentio/ware#ware-1\n\n[ware-use]: https://github.com/segmentio/ware#usefn\n\n[ware-run]: https://github.com/segmentio/ware#runinput-callback\n\n[context]: #attachwarecontext\n",
  "readmeFilename": "readme.md",
  "_id": "attach-ware@2.0.0",
  "dist": {
    "shasum": "0a529e3f36803c27b26d25aa7b66022799e2c7b3"
  },
  "_from": "attach-ware@^2.0.0",
  "_resolved": "https://registry.npmjs.org/attach-ware/-/attach-ware-2.0.0.tgz"
}
