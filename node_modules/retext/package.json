{
  "name": "retext",
  "version": "2.0.0",
  "description": "Extensible system for analysing and manipulating natural language",
  "license": "MIT",
  "keywords": [
    "natural",
    "language",
    "parser",
    "analyse",
    "manipulate",
    "nlcst"
  ],
  "dependencies": {
    "nlcst-to-string": "^1.0.0",
    "parse-latin": "^3.0.0",
    "unified": "^3.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wooorm/retext.git"
  },
  "bugs": {
    "url": "https://github.com/wooorm/retext/issues"
  },
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    },
    {
      "name": "Blake Embrey",
      "email": "hello@blakeembrey.com",
      "url": "http://blakeembrey.me"
    }
  ],
  "files": [
    "index.js",
    "lib"
  ],
  "devDependencies": {
    "browserify": "^13.0.0",
    "eslint": "^2.0.0",
    "esmangle": "^1.0.0",
    "istanbul": "^0.4.0",
    "jscs": "^2.0.0",
    "jscs-jsdoc": "^1.0.0",
    "nlcst-test": "^0.2.1",
    "remark": "^4.0.0",
    "remark-comment-config": "^3.0.0",
    "remark-github": "^4.0.1",
    "remark-lint": "^3.0.0",
    "remark-validate-links": "^3.0.0",
    "tape": "^4.4.0"
  },
  "scripts": {
    "build-md": "remark . --quiet --frail",
    "build-bundle": "browserify index.js -s Retext > retext.js",
    "build-mangle": "esmangle retext.js > retext.min.js",
    "build": "npm run build-md && npm run build-bundle && npm run build-mangle",
    "lint-api": "eslint .",
    "lint-style": "jscs --reporter inline .",
    "lint": "npm run lint-api && npm run lint-style",
    "test-api": "node test.js",
    "test-coverage": "istanbul cover test.js",
    "test": "npm run build && npm run lint && npm run test-coverage"
  },
  "readme": "# ![retext][logo]\n\n[![Build Status][build-badge]][build-status]\n[![Coverage Status][coverage-badge]][coverage-status]\n[![Code Climate][climate-badge]][climate-status]\n\n**retext** is an extensible natural language processor with support for\nmultiple languages. **retext** provides a pluggable system for analysing\nand manipulating natural language in JavaScript. It works on Node and\nin the Browser.\n\n> Rather than being a do-all library for Natural Language Processing\n> (such as [NLTK][] or [OpenNLP][]), **retext** aims to be useful for\n> more practical use cases (such as checking for [insensitive words][alex]\n> or decoding [emoticons][retext-emoji]) instead of more academic\n> goals (research purposes).\n> **retext** is inherently modular‚Äîit uses plugins (similar to\n> [remark][] for markdown) instead of providing everything out of\n> the box (such as  [Natural][]). This makes **retext** a viable\n> tool for use on the web.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install retext\n```\n\n**retext** is also available as an AMD, CommonJS, and globals module,\n[uncompressed and compressed][releases].\n\n## Usage\n\nThe following example uses [**retext-emoji**][retext-emoji] to show\nemoji and [**retext-smartypants**][retext-smartypants] for smart\npunctuation.\n\nRequire dependencies:\n\n```javascript\nvar retext = require('retext');\nvar emoji = require('retext-emoji');\nvar smartypants = require('retext-smartypants');\n```\n\nCreate an instance using retext-emoji and -smartypants:\n\n```javascript\nvar processor = retext().use(smartypants).use(emoji, {\n    'convert' : 'encode'\n});\n```\n\nProcess a document:\n\n```javascript\nvar doc = processor.process([\n    'The three wise monkeys [. . .] sometimes called the three mystic',\n    'apes--are a pictorial maxim. Together they embody the proverbial',\n    'principle to (\"see no evil, hear no evil, speak no evil\"). The',\n    'three monkeys are Mizaru (:see_no_evil:), covering his eyes, who',\n    'sees no evil; Kikazaru (:hear_no_evil:), covering his ears, who',\n    'hears no evil; and Iwazaru (:speak_no_evil:), covering his mouth,',\n    'who speaks no evil.'\n].join('\\n'));\n```\n\nYields (you need a browser which supports emoji to see them):\n\n```text\nThe three wise monkeys [‚Ä¶] sometimes called the three mystic\napes‚Äîare a pictorial maxim. Together they embody the proverbial\nprinciple to (‚Äúsee no evil, hear no evil, speak no evil‚Äù). The\nthree monkeys are Mizaru (üôà), covering his eyes, who\nsees no evil; Kikazaru (üôâ), covering his ears, who\nhears no evil; and Iwazaru (üôä), covering his mouth,\nwho speaks no evil.\n```\n\n## API\n\n### `retext.use(plugin[, options])`\n\nChange the way [**retext**][api] works by using a [plugin][].\n\n**Signatures**\n\n*   `processor = retext.use(plugin, options?)`;\n*   `processor = retext.use(plugins)`.\n\n**Parameters**\n\n*   `plugin` (`Function`) ‚Äî A [**Plugin**][plugin];\n\n*   `plugins` (`Array.<Function>`) ‚Äî A list of [**Plugin**][plugin]s;\n\n*   `options` (`Object?`) ‚Äî Passed to the plugin. Specified by its\n    documentation.\n\n**Returns**\n\n`Object` ‚Äî an instance of Retext: The returned object functions just like\n**retext** (it has the same methods), but caches the `use`d plugins. This\nprovides the ability to chain `use` calls to use multiple plugins, but\nensures the functioning of the **retext** module does not change for other\ndependents.\n\n### `retext.process(value[, done])`\n\nParse a text document, apply plugins to it, and compile it into\nsomething else.\n\n**Parameters**\n\n*   `value` ([`VFile`][vfile] or `string`)\n    ‚Äî Text document;\n\n*   `done` ([`Function`][done], optional).\n\n**Returns**\n\n`string?`: A document. Formatted in whatever plugins generate. The result is\n`null` if a plugin is asynchronous, in which case the callback `done` should‚Äôve\nbeen passed (don‚Äôt worry: plugin creators make sure you know its async).\n\n### `function done(err, file, doc)`\n\nCallback invoked when the output is generated with either an error, or the\nprocessed document (represented as a virtual file and a string).\n\n**Parameters**\n\n*   `err` (`Error?`) ‚Äî Reason of failure;\n*   `file` ([`VFile?`][vfile]) ‚Äî Virtual file;\n*   `doc` (`string?`) ‚Äî Generated document.\n\n## Plugin\n\n### `function attacher(retext[, options])`\n\nA plugin is a function, which takes the **Retext** instance a user attached\nthe plugin on as a first parameter and optional configuration as a second\nparameter.\n\nA plugin can return a `transformer`.\n\n### `function transformer(node, file[, next])`\n\nA transformer changes the provided document (represented as a node and a\nvirtual file).\n\nTransformers can be asynchronous, in which case `next` must be invoked\n(optionally with an error) when done.\n\n## List of Plugins\n\n*   [`dunckr/retext-cliches`](https://github.com/dunckr/retext-cliches)\n    ‚Äî Check phrases for cliches;\n\n*   [`wooorm/retext-dutch`](https://github.com/wooorm/retext-dutch)\n    ‚Äî Dutch language support;\n\n*   [`wooorm/retext-english`](https://github.com/wooorm/retext-english)\n    ‚Äî English language support;\n\n*   [`wooorm/retext-emoji`](https://github.com/wooorm/retext-emoji)\n    ‚Äî (**[demo](http://wooorm.github.io/retext-emoji/)**)\n    ‚Äî Encode or decode [Gemojis](https://github.com/github/gemoji);\n\n*   [`wooorm/retext-equality`](https://github.com/wooorm/retext-equality)\n    ‚Äî Warn about possible insensitive, inconsiderate language;\n\n*   [`wooorm/retext-intensify`](https://github.com/wooorm/retext-intensify)\n    ‚Äî Check weak and mitigating wording;\n\n*   [`wooorm/retext-keywords`](https://github.com/wooorm/retext-keywords)\n    ‚Äî (**[demo](http://wooorm.github.io/retext-keywords/)**)\n    ‚Äî Extract keywords and keyphrases;\n\n*   [`wooorm/retext-profanities`](https://github.com/wooorm/retext-profanities)\n    ‚Äî Check profane and vulgar wording;\n\n*   [`wooorm/retext-readability`](https://github.com/wooorm/retext-readability)\n    ‚Äî Check readability;\n\n*   [`wooorm/retext-sentiment`](https://github.com/wooorm/retext-sentiment)\n    ‚Äî (**[demo](http://wooorm.github.io/retext-sentiment/)**)\n    ‚Äî Detect sentiment in text;\n\n*   [`wooorm/retext-simplify`](https://github.com/wooorm/retext-simplify)\n    ‚Äî Check phrases for simpler alternatives;\n\n*   [`wooorm/retext-smartypants`](https://github.com/wooorm/retext-smartypants)\n    ‚Äî (**[demo](http://wooorm.github.io/retext-smartypants/)**)\n    ‚Äî Implementation of [SmartyPants](http://daringfireball.net/projects/smartypants/).\n\n## List of Utilities\n\nThe following projects are useful when working with the syntax tree,\n[NLCST][]:\n\n*   [`wooorm/nlcst-is-literal`](https://github.com/wooorm/nlcst-is-literal)\n    ‚Äî Check whether a node is meant literally;\n\n*   [`wooorm/nlcst-normalize`](https://github.com/wooorm/nlcst-normalize)\n    ‚Äî Normalize a word for easier comparison;\n\n*   [`wooorm/nlcst-search`](https://github.com/wooorm/nlcst-search)\n    ‚Äî Search for patterns in an NLCST tree;\n\n*   [`wooorm/nlcst-to-string`](https://github.com/wooorm/nlcst-to-string)\n    ‚Äî Stringify a node;\n\n*   [`wooorm/nlcst-test`](https://github.com/wooorm/nlcst-test)\n    ‚Äî Validate a NLCST node;\n\nIn addition, see [`wooorm/unist`][unist] for other utilities which\nwork with **retext** nodes, but also with other nodes.\n\nAnd finally, see [`wooorm/vfile`][vfile] for a list of utilities which\nwork with virtual files.\n\n## List of Products\n\nThe following products use **retext**:\n\n### CLI\n\n*   [`wooorm/alex`](https://github.com/wooorm/nlcst-to-string)\n    ‚Äî Catch insensitive, inconsiderate writing.\n\n### Node\n\n*   [`voischev/posthtml-retext`](https://github.com/voischev/posthtml-retext)\n    ‚Äî PostHTML plugin wrapper.\n\n## Related\n\n*   [nlcst][]\n*   [unist][]\n*   [vfile][]\n*   [unified][]\n\n## License\n\n[MIT][license] ¬© [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[logo]: https://cdn.rawgit.com/wooorm/retext/master/logo.svg\n\n[build-badge]: https://img.shields.io/travis/wooorm/retext.svg\n\n[build-status]: https://travis-ci.org/wooorm/retext\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/retext.svg\n\n[coverage-status]: https://codecov.io/github/wooorm/retext\n\n[climate-badge]: http://img.shields.io/codeclimate/github/wooorm/retext.svg\n\n[climate-status]: https://codeclimate.com/github/wooorm/retext\n\n[author]: http://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[releases]: https://github.com/wooorm/retext/releases\n\n[vfile]: https://github.com/wooorm/vfile\n\n[unist]: https://github.com/wooorm/unist\n\n[nlcst]: https://github.com/wooorm/nlcst\n\n[unified]: https://github.com/wooorm/unified\n\n[api]: #api\n\n[plugin]: #plugin\n\n[done]: #function-doneerr-file-doc\n\n[license]: LICENSE\n\n[nltk]: http://www.nltk.org\n\n[opennlp]: https://opennlp.apache.org\n\n[alex]: https://github.com/wooorm/alex\n\n[retext-emoji]: https://github.com/wooorm/retext-emoji\n\n[remark]: https://github.com/wooorm/remark\n\n[natural]: https://github.com/NaturalNode/natural\n\n[retext-smartypants]: https://github.com/wooorm/retext-smartypants\n",
  "readmeFilename": "readme.md",
  "_id": "retext@2.0.0",
  "dist": {
    "shasum": "8717ddd1c2caa21a914e5716225909cd09d2d63c"
  },
  "_from": "retext@",
  "_resolved": "https://registry.npmjs.org/retext/-/retext-2.0.0.tgz"
}
